def print_board(x_state, o_state):
    """Prints the Tic-Tac-Toe board."""
    board = []
    for i in range(9):
        if x_state[i] == 1:
            board.append('X')
        elif o_state[i] == 1:
            board.append('O')
        else:
            board.append(str(i))
    
    print(f"{board[0]} | {board[1]} | {board[2]}")
    print("--|---|---")
    print(f"{board[3]} | {board[4]} | {board[5]}")
    print("--|---|---")
    print(f"{board[6]} | {board[7]} | {board[8]}")


def check_win(x_state, o_state):
    """Checks if there is a winner."""
    winning_combinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
        [0, 4, 8], [2, 4, 6]              # Diagonals
    ]
    
    for combo in winning_combinations:
        if x_state[combo[0]] == x_state[combo[1]] == x_state[combo[2]] == 1:
            return 'X'
        if o_state[combo[0]] == o_state[combo[1]] == o_state[combo[2]] == 1:
            return 'O'
    return None


def get_player_move(player, state):
    """Gets a valid move from the player."""
    while True:
        try:
            move = int(input(f"Player {player}, please enter a position (0-8): "))
            if move < 0 or move > 8:
                print("Invalid input! Please choose a number between 0 and 8.")
            elif state[move] != 0:
                print("This position is already occupied. Choose another one.")
            else:
                return move
        except ValueError:
            print("Invalid input! Please enter a number.")


def play_game():
    """Controls the flow of the Tic-Tac-Toe game."""
    # Initialize game states for both players (X and O)
    x_state = [0] * 9  # 1 for 'X' positions, 0 for empty
    o_state = [0] * 9  # 1 for 'O' positions, 0 for empty
    current_turn = 'X'  # Player X starts
    
    print("Welcome to Tic-Tac-Toe!")

    while True:
        print_board(x_state, o_state)
        
        # Get the current player's move
        if current_turn == 'X':
            move = get_player_move('X', x_state + o_state)
            x_state[move] = 1
        else:
            move = get_player_move('O', x_state + o_state)
            o_state[move] = 1
        
        # Check for a winner
        winner = check_win(x_state, o_state)
        if winner:
            print_board(x_state, o_state)
            print(f"Player {winner} wins the game!")
            break
        
        # Check if the game is a draw (board is full)
        if all(x_state[i] or o_state[i] for i in range(9)):
            print_board(x_state, o_state)
            print("It's a draw!")
            break
        
        # Switch turns
        current_turn = 'O' if current_turn == 'X' else 'X'


if __name__ == "__main__":
    play_game()
